//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Security.Policy;
using System.Web.Mvc;
using ABS.Models;
using ABS.Web.Utility;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
namespace ABS.Web.ViewModels
{
    public partial class ViewModelVoucherMaster
    {
        public ViewModelVoucherMaster()
        {
            AccVoucherDetails = new List<AccVoucherDetail>();
            VoucherDetails = new List<ViewModelVoucherDetail>();
        }

        public int Id { get; set; }
        [Display(Name = "Voucher No")]
        [Required(ErrorMessage = "Voucher No is required.")]
        public string VoucherNo { get; set; }
        [Display(Name = "Voucher Date")]
        public DateTime VoucherDate { get; set; }
        [Display(Name = "Company Name")]
        [Required(ErrorMessage = "Company Name is required.")]
        public int CompanyId { get; set; }
        public int VoucherTypeId { get; set; }
        [Display(Name = "Payment To")]
        public string PaymentTo { get; set; }
        [Display(Name = "Cheque No")]
        public string ChequeNo { get; set; }
        [Display(Name = "Cheque Date")]
        public Nullable<System.DateTime> ChequeDate { get; set; }
        public Nullable<int> ChequeBankId { get; set; }
        public string ReferenceNo { get; set; }
        public Nullable<int> EntryType { get; set; }
        public Nullable<int> CurrencyId { get; set; }
        public Nullable<decimal> ConversionRate { get; set; }

        [Required(ErrorMessage = "This Field is required.")]
        public string Narration { get; set; }
        public Nullable<int> VMonth { get; set; }
        public Nullable<int> VYear { get; set; }
        public Nullable<int> SerialNo { get; set; }
        public Nullable<bool> MApproval { get; set; }
        public Nullable<bool> GApproval { get; set; }
        public Nullable<bool> DApproval { get; set; }
        public Nullable<int> CreatedBy { get; set; }
        public Nullable<System.DateTime> CreatedDate { get; set; }
        public Nullable<int> UpdatedBy { get; set; }
        public Nullable<System.DateTime> UpdatedDate { get; set; }
        public string IPAddress { get; set; }
        public Nullable<bool> IsActive { get; set; }
        [Display(Name = "Debit")]
        public decimal TotalDebitAmount { get; set; }

        [Display(Name = "Credit")]
        public decimal TotalCreditAmount { get; set; }

        [Display(Name = "Voucher Date")]
        [Required(ErrorMessage = "This Field is required.")]

        public string VoucherDateStr { get; set; }

        [Display(Name = "Cheque Date")]
        public string ChequeDateStr { get; set; }

        public virtual CmnBank BankInfo { get; set; }
        public virtual CmnCompany Company { get; set; }
        public virtual AccCurrencyInfo CurrencyInfo { get; set; }
        public virtual AccVoucherType VoucherType { get; set; }
        public virtual ICollection<ViewModelVoucherDetail> VoucherDetails { get; set; }
        public virtual CmnCompany CmnCompany { get; set; }
        [Display(Name = "Voucher Type")]
        public string VoucherTypeName { get; set; }
        public List<AccVoucherDetail> AccVoucherDetails { get; set; }

        public AccVoucherMaster VoucherMasterEntity()
        {
            var objVoucherMaster = new AccVoucherMaster();
            objVoucherMaster.Id = this.Id;
            objVoucherMaster.VoucherNo = this.VoucherNo;
            objVoucherMaster.VoucherDate = this.VoucherDate;
            objVoucherMaster.CompanyId = this.CompanyId;
            objVoucherMaster.VoucherTypeId = this.VoucherTypeId;
            objVoucherMaster.PaymentTo = this.PaymentTo;
            objVoucherMaster.ChequeNo = this.ChequeNo;
            objVoucherMaster.ChequeDate = this.ChequeDate;
            objVoucherMaster.ChequeBankId = this.ChequeBankId;
            objVoucherMaster.ReferenceNo = this.ReferenceNo;
            objVoucherMaster.EntryType = this.EntryType;
            objVoucherMaster.CurrencyId = this.CurrencyId;
            objVoucherMaster.ConversionRate = this.ConversionRate;
            objVoucherMaster.Narration = this.Narration;
            objVoucherMaster.VMonth = this.VMonth;
            objVoucherMaster.VYear = this.VYear;
            objVoucherMaster.SerialNo = this.SerialNo;
            objVoucherMaster.MApproval = this.MApproval;
            objVoucherMaster.GApproval = this.GApproval;
            objVoucherMaster.DApproval = this.DApproval;
            objVoucherMaster.CreatedBy = this.CreatedBy;
            objVoucherMaster.CreatedDate = this.CreatedDate;
            objVoucherMaster.UpdatedBy = this.UpdatedBy;
            objVoucherMaster.UpdatedDate = this.UpdatedDate;
            objVoucherMaster.IPAddress = this.IPAddress;
            objVoucherMaster.IsActive = this.IsActive;


            // objVoucherMaster.VoucherDetails = this.VoucherDetails;
            //objVoucherMaster.CmnBank = this.BankInfo;
            //objVoucherMaster.CmnCompany = this.CmnCompany;
            objVoucherMaster.AccVoucherType = this.VoucherType;

            return objVoucherMaster;


        }

        #region GETLIST
        public List<ViewModelVoucherMaster> GetVoucherListByType(int voucherTypeId)
        {


            List<ViewModelVoucherMaster> results = null;
            using (var _db = new ERP_Entities())
            {
                results = (from vm in _db.AccVoucherMasters
                           join vd in _db.AccVoucherDetails on vm.Id equals vd.VMasterId
                           where vm.VoucherTypeId == voucherTypeId && vm.IsActive == true
                           group vd by new { vm.Id, vm.VoucherNo, vm.Narration, vm.VoucherDate, vm.ChequeNo, vm.ChequeDate }
                               into g
                               select new ViewModelVoucherMaster()
                               {
                                   Id = g.Key.Id,
                                   VoucherNo = g.Key.VoucherNo,
                                   VoucherDate = g.Key.VoucherDate,
                                   Narration = g.Key.Narration,
                                   ChequeNo = g.Key.ChequeNo,
                                   ChequeDate = g.Key.ChequeDate,
                                   TotalDebitAmount = g.Sum(r => r.DebitAmount),
                                   TotalCreditAmount = g.Sum(r => r.CreditAmount)

                               }).ToList();

            }

            return results;

        }
        #endregion


        #region GETSingle
        public ViewModelVoucherMaster GetVoucherById(int id, int type)
        {

            ViewModelVoucherMaster voucherMaster = null;
            using (var _db = new ERP_Entities())
            {

                voucherMaster = (from vm in _db.AccVoucherMasters.Include(vd => vd.AccVoucherDetails)
                                 where vm.VoucherTypeId == type && vm.Id == id && vm.IsActive == true
                                 select new
                                 {
                                     Id = vm.Id,
                                     VoucherNo = vm.VoucherNo,
                                     VoucherDate = vm.VoucherDate,
                                     CompanyId = vm.CompanyId,
                                     Narration = vm.Narration,
                                     PaymentTo = vm.PaymentTo,
                                     VoucherDetails = vm.AccVoucherDetails


                                 }).ToList().Select(x => new ViewModelVoucherMaster()
                    {
                        Id = x.Id,
                        VoucherNo = x.VoucherNo,
                        VoucherDate = x.VoucherDate,
                        VoucherDateStr = UniqueCode.GetDateFormat_dd_mm_yyyy(x.VoucherDate),
                        CompanyId = x.CompanyId,
                        Narration = x.Narration,
                        PaymentTo = x.PaymentTo,
                        TotalCreditAmount = UniqueCode.sumCredit(x.Id),
                        TotalDebitAmount = UniqueCode.sumDebit(x.Id),

                        VoucherDetails = UniqueCode.GetVoucherDetailsByMasterId(x.Id)
                    }).SingleOrDefault();
            }
            return voucherMaster;
        }

        #endregion

        #region Save
        public string VoucherSave(int userId, EmVoucherType type, string voucherCode)
        {

            try
            {

                if (VoucherDetails == null)
                {
                    return "Please Provide Cash Payment Voucher Detail Information";
                }

                if (TotalDebitAmount != TotalCreditAmount)
                {
                    return "Total Debit Amount and Credit Amount must be Equal";
                }

                if (TotalDebitAmount == 0 && TotalCreditAmount == 0)
                {
                    return "Total Debit Amount and Credit Amount Zero (0) Not Allow";
                }

                Id = Convert.ToInt32(UniqueCode.GetAutoNumber("voucher"));
                CreatedBy = userId;
                CreatedDate = DateTime.Now;
                UpdatedBy = userId;
                UpdatedDate = DateTime.Now;
                VoucherDate = UniqueCode.GetDateFormat_MM_dd_yyy(VoucherDateStr);
                VoucherNo = UniqueCode.VoucherCodeGenerate(type, voucherCode, VoucherDate, CompanyId);
                SerialNo = Convert.ToInt32(UniqueCode.GetVoucherSerialByMonth(type, VoucherDate));
                if (type == EmVoucherType.BankVoucher)
                {
                    ChequeDate = UniqueCode.GetDateFormat_MM_dd_yyy(ChequeDateStr);
                    CreatedDate = DateTime.Now;
                }

                VoucherTypeId = (int)type;
                IsActive = true;

                foreach (var vDetail in VoucherDetails)
                {
                    if (vDetail.CostCenterId != 0 && vDetail.AC5Id != 0)
                    {
                        if ((vDetail.DebitAmount == 0) && (vDetail.CreditAmount == 0))
                            return "Please provide at lest one amount(Debit or Credit)";


                        vDetail.TransactionType = vDetail.DebitAmount != 0 ? "Debit" : "Credit";
                        vDetail.VoucherNo = VoucherNo;
                        vDetail.VMasterId = Id;
                        vDetail.IsActive = true;

                        //cpv.VoucherDetails.Add(vDetail);
                        AccVoucherDetails.Add(vDetail.VoucherDetailEntity());
                    }
                    else
                    {
                        return "Provide LedgerInfo and CostCenter in all field";

                    }

                }
                AccVoucherMaster voucherMaster = VoucherMasterEntity();
                using (var _db = new ERP_Entities())
                {
                    _db.AccVoucherDetails.AddRange(AccVoucherDetails);

                    _db.AccVoucherMasters.Add(voucherMaster);

                    _db.SaveChanges();
                }

                return "ok";
            }
            catch
            {

                return "Please provide all information";
            }

        }
        #endregion

        #region Edit

        public string VoucherEdit(int userId, EmVoucherType type, string voucherCode)
        {

            try
            {

                if (VoucherDetails == null)
                {
                    return "Please Provide Cash Payment Voucher Detail Information";
                }

                if (TotalDebitAmount != TotalCreditAmount)
                {
                    return "Total Debit Amount and Credit Amount must be Equal";
                }

                if (TotalDebitAmount == 0 && TotalCreditAmount == 0)
                {
                    return "Total Debit Amount and Credit Amount Zero (0) Not Allow";
                }


                using (var _db = new ERP_Entities())
                {
                    var oldVm = _db.AccVoucherMasters.SingleOrDefault(r => r.Id == Id);

                    if (oldVm == null)
                    {
                        return "Voucher not found for existing voucher no!";
                    }
                    _db.Database.ExecuteSqlCommand("exec VoucherHistoryInsert {0}", oldVm.Id);

                    oldVm.Narration = Narration;
                    oldVm.PaymentTo = PaymentTo;
                    oldVm.UpdatedDate = DateTime.Now;
                    oldVm.VoucherTypeId = (int)type;
                    if (type == EmVoucherType.BankVoucher)
                    {
                        oldVm.ChequeNo = ChequeNo;
                        oldVm.ChequeDate = UniqueCode.GetDateFormat_MM_dd_yyy(ChequeDateStr);
                    }
                    var newDate = UniqueCode.GetDateFormat_MM_dd_yyy(VoucherDateStr);
                    if (newDate != oldVm.VoucherDate)
                    {
                        oldVm.VoucherDate = newDate;

                        oldVm.VoucherNo = UniqueCode.VoucherCodeGenerate(type, voucherCode, oldVm.VoucherDate,oldVm.CompanyId);
                        oldVm.SerialNo = Convert.ToInt32(UniqueCode.GetVoucherSerialByMonth(type, oldVm.VoucherDate));
                    }


                    var oldVd = _db.AccVoucherDetails.Where(p => p.VMasterId == Id);
                    _db.AccVoucherDetails.RemoveRange(oldVd);

                    foreach (var vDetail in VoucherDetails)
                    {
                        if (vDetail.CostCenterId != 0 && vDetail.AC5Id != 0)
                        {
                            if ((vDetail.DebitAmount == 0) && (vDetail.CreditAmount == 0))
                                return "Please provide at lest one amount(Debit or Credit)";
                            vDetail.TransactionType = vDetail.DebitAmount != 0 ? "Debit" : "Credit";
                            vDetail.VoucherNo = oldVm.VoucherNo;
                            vDetail.VMasterId = oldVm.Id;
                            vDetail.IsActive = true;

                            _db.AccVoucherDetails.Add(vDetail.VoucherDetailEntity());
                        }
                        else
                        {
                            return "Provide LedgerInfo and CostCenter in all field";
                        }

                    }

                    _db.Entry(oldVm).State = EntityState.Modified;

                    _db.SaveChanges();


                } // end using

                return "ok";
            }
            catch
            {

                return "Please provide all information";
            }

        }

        #endregion

    }

    public enum EmVoucherType : int
    {
        CashVoucherHeadOffice = 1,
        BankVoucher,
        ReceiptVoucher,
        ContraVoucher,
        JournalVoucher,
        CashVoucherFactory
    };

}